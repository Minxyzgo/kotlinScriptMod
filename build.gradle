plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.5.10'
}
group "kotlinScriptMod"

sourceSets.main {
    kotlin.srcDir("src/")
    resources.srcDir("assets/")
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile 'org.jetbrains.kotlin:kotlin-compiler-embeddable:1.5.10'
    compile 'org.jetbrains.kotlin:kotlin-scripting-compiler-embeddable:1.5.10'
    compile 'org.jetbrains.kotlin:kotlin-stdlib:1.5.10'
    compile 'org.jetbrains.kotlin:kotlin-script-runtime:1.5.10'
    compile 'org.jetbrains.kotlin:kotlin-script-util:1.5.10'
    //compile 'org.jetbrains.kotlin:kotlin-scripting-jsr223:1.5.10'
    compileOnly "com.github.Anuken.Mindustry:core:v126.2"
    compileOnly "com.github.Anuken.Arc:arc-core:v126.2"
}

jar {
    archiveFileName.set "kotlinScriptMod"
    manifest {
        attributes 'Main-Class': group + 'com.github.minxyzgo.compile.Compiler'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task dexify(type: Jar) {
    archiveName "dexed-artifact.jar"

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, "artifact.jar"),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")
    doFirst {
        exec {
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", 26, "--output", dexedArtifact, jarArtifact]
            if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows'))
                commandLine("cmd", "/c", *command)
            else
                commandLine(*command)
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"